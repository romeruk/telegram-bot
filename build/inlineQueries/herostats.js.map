{"version":3,"sources":["../../src/inlineQueries/herostats.js"],"names":["herostats","bot","inlineQuery","ctx","query","dataCount","page","parseInt","split","axios","get","process","env","OPEN_DOTA_BASE_API_URL","OPEN_DOTA_KEY","heroes_stats","data","slice","result","map","hero","i","type","id","String","title","localized_name","input_message_content","message_text","primary_attr","move_speed","attack_type","base_str","base_agi","base_int","roles","join","parse_mode","thumb_url","icon","answerInlineQuery","console","log"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAACC,GAAD,EAAS;AACzBA,EAAAA,GAAG,CAACC,WAAJ,CAAgB,kBAAhB,EAAoC,8BAApC;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAwD,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9CC,cAAAA,KAD8C,GACpCD,GAAG,CAACD,WADgC,CAC9CE,KAD8C;AAEhDC,cAAAA,SAFgD,GAEpC,EAFoC;AAGlDC,cAAAA,IAHkD,GAG3CC,QAAQ,CAACH,KAAK,CAACI,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAD,EAAsB,EAAtB,CAAR,IAAqC,CAHM,EAKtD;;AALsD,oBAMlDF,IAAI,GAAG,CAN2C;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBASvBG,kBAAMC,GAAN,WAAaC,OAAO,CAACC,GAAR,CAAYC,sBAAzB,gCAAqEF,OAAO,CAACC,GAAR,CAAYE,aAAjF,EATuB;;AAAA;AAS5CC,cAAAA,YAT4C;AAW5CC,cAAAA,IAX4C,GAWrCD,YAAY,CAACC,IAAb,CAAkBC,KAAlB,CAAwB,CAACX,IAAI,GAAG,CAAR,IAAaD,SAArC,EAAgDC,IAAI,GAAGD,SAAvD,CAXqC;AAc9Ca,cAAAA,MAd8C,GAcrCF,IAAI,CAACG,GAAL,CAAS,UAACC,IAAD,EAAOC,CAAP,EAAa;AACjC,uBAAO;AACLC,kBAAAA,IAAI,EAAE,SADD;AAELC,kBAAAA,EAAE,EAAEC,MAAM,CAACH,CAAD,CAFL;AAGLI,kBAAAA,KAAK,EAAEL,IAAI,CAACM,cAHP;AAILC,kBAAAA,qBAAqB,EAAE;AACrBC,oBAAAA,YAAY,kFAAyBR,IAAI,CAACM,cAA9B,mHAA0E,oCAAaN,IAAI,CAACS,YAAlB,CAA1E,4IAA4IT,IAAI,CAACU,UAAjJ,yEAAkL,mCAAYV,IAAI,CAACW,WAAjB,CAAlL,qFAAwOX,IAAI,CAACY,QAA7O,yHAAoRZ,IAAI,CAACa,QAAzR,mHAA+Tb,IAAI,CAACc,QAApU,+HAA4Wd,IAAI,CAACe,KAAL,CAAWC,IAAX,EAA5W,CADS;AAErBC,oBAAAA,UAAU,EAAE;AAFS,mBAJlB;AAQLC,kBAAAA,SAAS,oCAA6BlB,IAAI,CAACmB,IAAlC;AARJ,iBAAP;AAUD,eAXY,CAdqC;AAAA,+CA2B3CpC,GAAG,CAACqC,iBAAJ,CAAsBtB,MAAtB,CA3B2C;;AAAA;AAAA;AAAA;AA6BlDuB,cAAAA,OAAO,CAACC,GAAR;;AA7BkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAxD;;AAAA;AAAA;AAAA;AAAA;AAkCD,CAnCD;;eAqCe1C,S","sourcesContent":["import axios from 'axios';\r\nimport { primary_attr, attack_type } from \"../helpers/listheroeshelper\";\r\nimport { limitsMiddleware } from \"../Middleware/index\";\r\n\r\nconst herostats = (bot) => {\r\n  bot.inlineQuery(/^herostats: \\d+$/, limitsMiddleware(), async (ctx) => {\r\n    const { query } = ctx.inlineQuery;\r\n    const dataCount = 50;\r\n    let page = parseInt(query.split(':')[1], 10) || 1;\r\n\r\n    //no sense to do api reguest if page > 3, becose there 130 heroes avaible in dota 2\r\n    if (page < 4) {\r\n      try {\r\n\r\n        const heroes_stats = await axios.get(`${process.env.OPEN_DOTA_BASE_API_URL}/heroStats?api_key=${process.env.OPEN_DOTA_KEY}`);\r\n\r\n        const data = heroes_stats.data.slice((page - 1) * dataCount, page * dataCount);\r\n\r\n\r\n        let result = data.map((hero, i) => {\r\n          return {\r\n            type: \"article\",\r\n            id: String(i),\r\n            title: hero.localized_name,\r\n            input_message_content: {\r\n              message_text: `<b>Назва героя:</b> ${hero.localized_name}\\n<b>Основний атрибут:</b> ${primary_attr(hero.primary_attr)}\\n<b>Базова швидкість руху:</b> ${hero.move_speed}\\n<b>Тип атаки:</b> ${attack_type(hero.attack_type)}\\n<b>Базова сила:</b> ${hero.base_str}\\n<b>Базова спритність:</b> ${hero.base_agi}\\n<b>Базовий інтелект:</b> ${hero.base_int}\\n<b>Іграбельні позиції:</b> ${hero.roles.join()}`,\r\n              parse_mode: \"HTML\"\r\n            },\r\n            thumb_url: `https://api.opendota.com${hero.icon}`\r\n          }\r\n        });\r\n\r\n        return ctx.answerInlineQuery(result);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n\r\n  });\r\n}\r\n\r\nexport default herostats;"],"file":"herostats.js"}